name: Update Go Dependencies

on:
  schedule:
    - cron: '0 0 * * 1'  # Запуск каждую неделю в понедельник в 00:00 UTC
  workflow_dispatch:      # Возможность ручного запуска

permissions:
  contents: write        # Явное указание разрешений

jobs:
  update:
    runs-on: ubuntu-latest  # Используем последнюю версию Ubuntu
    timeout-minutes: 30     # Таймаут для предотвращения зависания

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0    # Загружаем всю историю
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check go.mod exists
        run: |
          if [ ! -f go.mod ]; then
            echo "Error: go.mod file not found"
            exit 1
          fi

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod  # Используем версию из go.mod
          check-latest: true
          cache: true       # Включаем кэширование модулей

      - name: Clean Go module cache
        run: |
          go clean -modcache
          go clean -cache

      - name: Update dependencies
        id: update
        run: |
          set -euo pipefail  # Строгий режим для bash
          
          echo "::group::Updating Go dependencies"
          
          # Сохраняем текущие версии для сравнения
          go list -m all > before_update.txt
          
          # Обновляем все зависимости кроме gvisor
          modules_to_update=$(go list -f '{{if and (not .Main) (not .Indirect)}}{{.Path}}{{end}}' -m all | grep -v 'gvisor.dev/gvisor')
          
          if [ -n "$modules_to_update" ]; then
            echo "Updating modules: $modules_to_update"
            echo "$modules_to_update" | xargs -r go get -u
          else
            echo "No direct modules to update"
          fi
          
          # Обновляем косвенные зависимости (кроме gvisor)
          go get -u all
          
          # Исключаем обновление gvisor (вернем его к исходной версии если было обновлено)
          if go list -m gvisor.dev/gvisor &>/dev/null; then
            original_version=$(grep "gvisor.dev/gvisor" go.mod | head -1 | awk '{print $2}')
            if [ -n "$original_version" ]; then
              echo "Restoring gvisor to original version: $original_version"
              go get gvisor.dev/gvisor@$original_version
            fi
          fi
          
          # Очистка и проверка
          go mod tidy
          go mod verify || {
            echo "Module verification failed"
            exit 1
          }
          
          # Выводим изменения для лога
          go list -m all > after_update.txt
          echo "Updates summary:"
          diff -u before_update.txt after_update.txt || true
          rm before_update.txt after_update.txt
          
          echo "::endgroup::"

      - name: Test compilation
        run: |
          echo "::group::Testing compilation after updates"
          # Проверяем, что проект компилируется после обновлений
          go build -v ./... || {
            echo "Compilation failed after dependency updates"
            exit 1
          }
          echo "::endgroup::"

      - name: Check for changes
        id: check
        run: |
          if git diff --quiet go.mod go.sum; then
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No changes to dependencies detected"
          else
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected in dependencies"
            git diff --stat go.mod go.sum
          fi

      - name: Commit and push changes
        if: steps.check.outputs.changes == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Создаем информативное сообщение коммита с перечнем обновлений
          echo "Preparing commit message with dependency changes"
          COMMIT_MSG="chore(deps): update Go dependencies\n\nAutomated update of Go dependencies excluding gvisor\n\nUpdated modules:"
          git diff go.mod | grep -E "^\+\s+[a-z0-9]" | sed 's/^+[[:space:]]*/- /' > updated_modules.txt
          UPDATES=$(cat updated_modules.txt)
          
          git add go.mod go.sum
          git commit -m "$(echo -e "$COMMIT_MSG\n$UPDATES")"
          
          # Попытка push с повторами при ошибках
          max_attempts=3
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Push attempt $attempt of $max_attempts"
            if git push origin HEAD; then
              echo "Successfully pushed changes on attempt $attempt"
              break
            else
              if [ $attempt -eq $max_attempts ]; then
                echo "Failed to push after $max_attempts attempts"
                exit 1
              fi
              echo "Push failed on attempt $attempt, retrying after pull and rebase..."
              git pull --rebase origin $(git rev-parse --abbrev-ref HEAD)
              attempt=$((attempt + 1))
              sleep $((5 * attempt))  # Увеличиваем время ожидания с каждой попыткой
            fi
          done
          rm -f updated_modules.txt
